package alex.command;

import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import alex.AlexException;
import alex.Deadline;
import alex.Storage;
import alex.Task;
import alex.TaskList;

/**
 * Represents a command to add a Deadline task to the task list.
 * Handles parsing the user input and saving the task to storage.
 */
public class DeadlineTaskCommand extends TaskCommand {

    private Storage storage;

    /**
     * Constructs a <code>DeadlineTaskCommand</code> with the provided input, task list, and storage.
     *
     * @param inputBreakdown User input split into command and arguments.
     * @param taskList Current task list to add the deadline to.
     * @param storage Storage interface to persist tasks.
     */
    public DeadlineTaskCommand(String[] inputBreakdown, TaskList taskList, Storage storage) {
        super(inputBreakdown, taskList);
        this.storage = storage;
    }

    /**
     * Breaks down the user input into the deadline description and date.
     *
     * @return Array with the first element as the task description and the second element as the deadline date.
     * @throws AlexException If the user input is invalid or incomplete.
     */
    public String[] taskBreakdown() throws AlexException {
        return this.getTarget("Please state what deadline you have and by when").split(" /by ");
    }

    /**
     * Executes the command by creating a new Deadline task, adding it to the task list,
     * and saving the updated list to storage.
     *
     * @return Confirmation message including the added task and total number of tasks.
     * @throws AlexException If the input is invalid.
     */
    @Override
    public String execute() throws AlexException {
        String DeadlineDescription = taskBreakdown()[0];
        String DeadlineDate = LocalDate.parse(taskBreakdown()[1]).format(DateTimeFormatter.ofPattern("MMM d yyyy"));

        Task toAdd = new Deadline(DeadlineDescription, DeadlineDate);
        TaskList taskList = getTaskList();
        taskList.add(toAdd);

        try {
            storage.saveTask(taskList);
        } catch (IOException e) {
            return ("File not found. Unable to save");
        } finally {
            String addTask = String.format("Ok, I've added this task: %s\n", toAdd);
            String taskLength = "Watch out, you have " + taskList.size() + " tasks left.";
            return addTask + taskLength;
        }
    }

    /**
     * Returns the response generated by executing this deadline task command.
     *
     * @return Chatbot response after handling the deadline task.
     * @throws AlexException If execution fails due to invalid input.
     */
    @Override
    public String response() throws AlexException {
        return this.execute();
    }
}
