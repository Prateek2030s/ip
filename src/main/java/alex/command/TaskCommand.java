package alex.command;

import alex.AlexException;
import alex.TaskList;

/**
 * Represents an abstract command that operates on a task list.
 * Provides shared functionality for all task-related commands.
 */
public abstract class TaskCommand implements Command {

    private String[] inputBreakdown;
    private TaskList taskList;

    /**
     * Constructs a <code>TaskCommand</code> with the provided user input and task list.
     *
     * @param inputBreakdown User input split into command and arguments.
     * @param taskList Current task list that the command will operate on.
     */
    public TaskCommand(String[] inputBreakdown, TaskList taskList)  {
        this.inputBreakdown = inputBreakdown;
        this.taskList = taskList;
    }

    /**
     * Executes the command and returns the response.
     * Must be implemented by concrete subclasses.
     *
     * @return Response generated by executing the command.
     * @throws AlexException If execution fails due to invalid input.
     */
    public abstract String execute() throws AlexException;

    /**
     * Returns the user input split into command and arguments.
     *
     * @return Array containing the command and its arguments.
     */
    public String[] getInputBreakdown() {
        return this.inputBreakdown;
    }

    /**
     * Returns the task list associated with this command.
     *
     * @return Task list to operate on.
     */
    public TaskList getTaskList() {
        return this.taskList;
    }

    /**
     * Returns the argument part of the input for the command.
     *
     * @param errorMessage Error message to display if no argument is provided.
     * @return The second element of the input, representing the command target.
     * @throws AlexException If the argument is missing.
     */
    public String getTarget(String errorMessage) throws AlexException {
        if (this.getInputBreakdown().length <= 1) {
            throw new AlexException(errorMessage);
        }
        return this.getInputBreakdown()[1];
    }
}