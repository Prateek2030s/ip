package alex.command;

import java.io.IOException;

import alex.AlexException;
import alex.Storage;
import alex.Task;
import alex.TaskList;

/**
 * Represents a command to delete a task from the task list.
 * Handles parsing the user's input and updating the task list and storage.
 */
public class DeleteTaskCommand extends TaskCommand {

    private Storage storage;

    /**
     * Constructs a <code>DeleteTaskCommand</code> with the given input, task list, and storage.
     *
     * @param inputBreakdown User input split into command and arguments.
     * @param taskList Current task list from which the task will be deleted.
     * @param storage Storage interface to persist updated task list.
     */
    public DeleteTaskCommand(String[] inputBreakdown, TaskList taskList, Storage storage) {
        super(inputBreakdown, taskList);
        this.storage = storage;
    }

    /**
     * Retrieves the task number specified by the user for deletion.
     *
     * @return The task number (1-based index) to be deleted.
     * @throws AlexException If the user input is invalid or not a number.
     */
    public int taskNumber() throws AlexException {
        return Integer.parseInt(this.getTarget("Please state which task to delete"));
    }

    /**
     * Executes the command by removing the specified task from the task list
     * and saving the updated list to storage.
     *
     * @return Confirmation message including the deleted task and the remaining task count.
     * @throws AlexException If the task number is invalid.
     */
    @Override
    public String execute() throws AlexException {

        assert getTaskList().size() >= 0 : "The length of the list should be non-negative";
        if (taskNumber() > getTaskList().size() || taskNumber() < 0) {
            throw new AlexException("Invalid number, please try again");
        }

        Task deleteTask = getTaskList().remove(taskNumber() - 1);

        try {
            storage.saveTask(getTaskList());
        } catch (IOException e) {
            return ("File not found. Unable to save");
        } finally {
            String afterDeleteTask = String.format("Ok, I've deleted this task: %s\n", deleteTask);
            String taskLength = "Watch out, you have " + getTaskList().size() + " tasks left.";
            return afterDeleteTask + taskLength;
        }
    }

    /**
     * Returns the response generated by executing this delete task command.
     *
     * @return Chatbot response after deleting the specified task.
     * @throws AlexException If execution fails due to invalid task number.
     */
    @Override
    public String response() throws AlexException {
        return this.execute();
    }
}
