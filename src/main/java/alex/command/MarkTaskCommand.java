package alex.command;

import java.io.IOException;

import alex.AlexException;
import alex.Storage;
import alex.TaskList;

/**
 * Represents a command to mark or unmark a task in the task list.
 * Handles updating the task's completion status and saving the updated list to storage.
 */
public class MarkTaskCommand extends TaskCommand {

    private Storage storage;
    private boolean isMark;

    /**
     * Constructs a <code>MarkTaskCommand</code> with the given input, task list, storage, and mark type.
     *
     * @param inputBreakdown User input split into command and arguments.
     * @param taskList Current task list to mark or unmark a task.
     * @param storage Storage interface to persist updated task list.
     * @param isMark True if marking a task as done; false if unmarking.
     */
    public MarkTaskCommand(String[] inputBreakdown, TaskList taskList, Storage storage, boolean isMark) {
        super(inputBreakdown, taskList);
        this.storage = storage;
        this.isMark = isMark;
    }

    /**
     * Retrieves the task number specified by the user for marking/unmarking.
     *
     * @return The task number (1-based index) to mark or unmark.
     * @throws AlexException If the user input is invalid or not a number.
     */
    public int taskNumber() throws AlexException {
        String errorMessage;
        if (isMark) {
            errorMessage = "Please state which task you would like to mark";
        } else {
            errorMessage = "Please state which task you would like to unmark";
        }
        return Integer.parseInt(this.getTarget(errorMessage));
    }

    /**
     * Marks or unmarks the task based on the <code>isMark</code> flag.
     *
     * @param taskNumber The task number to mark or unmark.
     * @return Confirmation message of the action performed.
     */
    public String markType(int taskNumber) {
        if (isMark) {
            return getTaskList().mark(taskNumber);
        } else {
            return getTaskList().unmark(taskNumber);
        }
    }

    /**
     * Executes the command by marking or unmarking the specified task
     * and saving the updated task list to storage.
     *
     * @return Confirmation message of the task status update.
     * @throws AlexException If the task number is invalid.
     */
    @Override
    public String execute() throws AlexException {

        assert getTaskList().size() >= 0 : "The length of the list should be non-negative";
        if (taskNumber() > getTaskList().size() || taskNumber() < 0) {
            throw new AlexException("Invalid number, please try again");
        }

        String responseMessage = markType(taskNumber());

        try {
            storage.saveTask(getTaskList());
        } catch (IOException e) {
            return ("File not found. Unable to save");
        } finally {
            return responseMessage;
        }
    }

    /**
     * Returns the response generated by executing this mark/unmark task command.
     *
     * @return Chatbot response after marking or unmarking the task.
     * @throws AlexException If execution fails due to invalid task number.
     */
    @Override
    public String response() throws AlexException {
        return this.execute();
    }
}