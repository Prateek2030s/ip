package alex;

import alex.command.AliasCommand;
import alex.command.ByeCommand;
import alex.command.DeadlineTaskCommand;
import alex.command.DeleteTaskCommand;
import alex.command.EventTaskCommand;
import alex.command.FindTaskCommand;
import alex.command.HelloCommand;
import alex.command.ListCommand;
import alex.command.MarkTaskCommand;
import alex.command.TodoTaskCommand;

/**
 * Represents a parser that interprets user input for the Alex chatbot.
 * It breaks down the input into commands and executes the corresponding actions.
 */
public class Parser {

    private String input;

    /**
     * Constructs a <code>Parser</code> for a given input string.
     *
     * @param input The raw user input to be parsed.
     */
    public Parser(String input) {
        this.input = input;
    }

    /**
     * Separates the first word of the input from the rest of the string.
     *
     * @return An array where the first element is the first word (command)
     *         and the second element is the remaining input.
     */
    public String[] inputBreakdown() {
        return input.split(" ", 2);
    }

    /**
     * Returns the first word of the input, representing the command.
     *
     * @return The command word from user input.
     * @throws AssertionError If the input is empty.
     */
    public String firstWord() {
        assert this.inputBreakdown().length > 0 : "Input cannot be empty";
        return this.inputBreakdown()[0];
    }

    /**
     * Parses the user input, executes the corresponding command, and returns the chatbot's response.
     *
     * @param taskList The task list to operate on for task-related commands.
     * @param aliases  The alias mapping for commands.
     * @param storage  The storage interface to persist task and alias data.
     * @return Response generated by executing the parsed command.
     * @throws AlexException If the input is invalid or the command is unrecognized.
     */
    public String parseInput(TaskList taskList, Alias aliases, Storage storage) throws AlexException {
        CommandType command = CommandType.stringToEnum(this.firstWord(), aliases);

        switch (command) {
        case TODO:
            return new TodoTaskCommand(inputBreakdown(), taskList, storage).response();
        case DEADLINE:
            return new DeadlineTaskCommand(inputBreakdown(), taskList, storage).response();
        case EVENT:
            return new EventTaskCommand(inputBreakdown(), taskList, storage).response();
        case LIST:
            return new ListCommand(taskList).response();
        case BYE:
            return new ByeCommand().response();
        case HELLO:
            return new HelloCommand().response();
        case MARK:
            return new MarkTaskCommand(inputBreakdown(), taskList, storage, true).response();
        case UNMARK:
            return new MarkTaskCommand(inputBreakdown(), taskList, storage, false).response();
        case FIND:
            return new FindTaskCommand(inputBreakdown(), taskList).response();
        case DELETE:
            return new DeleteTaskCommand(inputBreakdown(), taskList, storage).response();
        case ALIAS:
            return new AliasCommand(inputBreakdown(), aliases, storage).response();
        default:
            throw new AlexException("HAHAHA I don't know what it means!");
        }
    }
}